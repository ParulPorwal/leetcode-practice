// class Solution {
//     public String longestCommonPrefix(String[] strs) {
//         // check if string is empty
//         if(strs.length == 0) return "";
        
//         // store first word 
//         String first = strs[0];
        
//         // interating from 2nd word
//         for(int i = 1; i < strs.length; i++){
            
//             // indexOf gives position of specified character in the string
//             while(strs[i].indexOf(first) != 0){
                
//                 // substring gives new string that is substring of the orginal string 
//                 // substring(int begin index, int endindex)
//                 first = first.substring(0, first.length() - 1);
//                 if(first.isEmpty()) return "";
//             }
//         }
//         return first;
//     }
// }

// N comparisons hence, O(N) time complexity


// 2nd approach 

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";
        for (int i = 0; i < strs[0].length() ; i++){
            char c = strs[0].charAt(i);
            for (int j = 1; j < strs.length; j ++) {
                if (i == strs[j].length() || strs[j].charAt(i) != c)
                    return strs[0].substring(0, i);             
            }
        }
        return strs[0];
    }
}
        
// O(N) time complexity, but better than 1st approach
